from typing import Callable, Dict, Optional

class Router:
    """
    üß≠ Router ‚Äî –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥ –∏ —Ç–µ–∫—Å—Ç–æ–≤.
    –ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –∏–∑–≤–ª–µ–∫–∞—Ç—å –∏—Ö –ø–æ –≤—Ö–æ–¥—è—â–µ–º—É —Ç–µ–∫—Å—Ç—É.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –ø—Ä–µ—Ñ–∏–∫—Å—ã –∏ fallback (.*).
    """
    def __init__(self):
        self.routes: Dict[str, Callable] = {}

    def register(self, pattern: str, handler: Callable):
        """
        üì¶ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ —à–∞–±–ª–æ–Ω–∞.
        –ü—Ä–∏–º–µ—Ä: register("/hello", hello_handler)
        """
        self.routes[pattern] = handler

    def match(self, text: str) -> Optional[Callable]:
        """
        üîç –ò—â–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –≤—Ö–æ–¥—è—â–µ–º—É —Ç–µ–∫—Å—Ç—É.
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
        - –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        - –ü—Ä–µ—Ñ–∏–∫—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, "/weather –¢–∞–ª–ª–∏–Ω")
        - Fallback (.*)
        """
        # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if text in self.routes:
            return self.routes[text]

        # –ü—Ä–µ—Ñ–∏–∫—Å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        for pattern in self.routes:
            if pattern != ".*" and text.startswith(pattern):
                return self.routes[pattern]

        # Fallback
        return self.routes.get(".*")