from core.router import Router
from core.hooks import before_dispatch, after_dispatch
from core.logger import log_event, log_error

class Dispatcher:
    """
    üß≠ Dispatcher ‚Äî –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –∞–ø–¥–µ–π—Ç–æ–≤.
    –í—ã–∑—ã–≤–∞–µ—Ç —Ö—É–∫–∏, –ª–æ–≥–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è, –ø–µ—Ä–µ–¥–∞—ë—Ç —Ç–µ–∫—Å—Ç –≤ –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫.
    """
    def __init__(self, router: Router):
        self.router = router

    async def dispatch(self, update: dict) -> str:
        """
        üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–π –∞–ø–¥–µ–π—Ç:
        - –≤—ã–∑—ã–≤–∞–µ—Ç —Ö—É–∫–∏ –¥–æ –∏ –ø–æ—Å–ª–µ
        - –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç
        - –Ω–∞—Ö–æ–¥–∏—Ç –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        """
        text = update.get("text", "")
        handler = self.router.match(text)  # üëà –∑–∞–º–µ–Ω–∏–ª–∏ resolve ‚Üí match

        await before_dispatch(update)

        try:
            if handler:
                log_event("dispatch", command=text, user_id=update.get("user_id"))
                response = await handler(update)
            else:
                response = "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞."
        except Exception as e:
            log_error("dispatch_failed", error=str(e), command=text)
            response = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã."

        await after_dispatch(update, response)
        return response