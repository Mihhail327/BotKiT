import os
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage

from core.router import Router
from core.dispatcher import Dispatcher as BotKitDispatcher

from modules.start import start_handler
from modules.hello import hello_handler
from modules.auth import auth_handler
from modules.feedback_form import feedback_handler
from modules.weather import weather_handler

# üîê –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

if not TOKEN:
    raise RuntimeError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env")

# üéõ Telegram-–±–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# üß† BotKit: –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä + –¥–∏—Å–ø–µ—Ç—á–µ—Ä
router = Router()
router.register("/start", start_handler)
router.register("/hello", hello_handler)
router.register("/auth", auth_handler)
router.register("/feedback", feedback_handler)
router.register("/weather", weather_handler)

# üì• –ü–æ–¥–∫–ª—é—á–∞–µ–º FSM-–æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–∫ fallback
router.register(".*", feedback_handler)  # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç—ã

botkit = BotKitDispatcher(router)

# üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: Message):
    update = {
        "text": message.text,
        "user_id": message.from_user.id,
        "chat_id": message.chat.id
    }
    response = await botkit.dispatch(update)
    await message.answer(response)

# üöÄ –ó–∞–ø—É—Å–∫ polling
async def start_bot():
    await dp.start_polling(bot)