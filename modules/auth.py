# üîê –°–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
VALID_TOKENS = {"secret123", "admin456"}

async def auth_handler(update: dict) -> str:
    """
    –ö–æ–º–∞–Ω–¥–∞ /auth <—Ç–æ–∫–µ–Ω>
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø –ø–æ —Ç–æ–∫–µ–Ω—É.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    # üì¶ –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
    parts = update.get("text", "").split(maxsplit=1)

    # ‚ùì –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω ‚Äî –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏
    if len(parts) < 2:
        return "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω: /auth secret123"

    token = parts[1]

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if token in VALID_TOKENS:
        return "‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω."
    else:
        return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω."