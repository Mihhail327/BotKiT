import pytest
from core.dispatcher import Dispatcher
from core.router import Router
from modules.feedback_form import feedback_handler


@pytest.mark.asyncio
async def test_feedback_flow():
    """
    üß™ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
    - –ü–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π FSM: –∏–º—è ‚Üí email ‚Üí —Å–æ–æ–±—â–µ–Ω–∏–µ
    - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    - –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    """

    # üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    router = Router()
    router.register("/feedback", feedback_handler)
    dispatcher = Dispatcher(router)

    user_id = 42  # üßç –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    # üü¢ –°—Ç–∞—Ä—Ç —Ñ–æ—Ä–º—ã ‚Äî FSM —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ "awaiting_name"
    update1 = {"user_id": user_id, "text": "/feedback"}
    r1 = await dispatcher.dispatch(update1)
    assert "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç" in r1

    # üü° –ò–º—è ‚Äî FSM —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ "awaiting_email"
    update2 = {"user_id": user_id, "text": "–ê–ª–∏—Å–∞"}
    r2 = await dispatcher.dispatch(update2)
    assert "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email" in r2

    # üîµ Email ‚Äî FSM —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç email –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ "awaiting_message"
    update3 = {"user_id": user_id, "text": "alice@example.com"}
    r3 = await dispatcher.dispatch(update3)
    assert "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" in r3

    # üü£ –°–æ–æ–±—â–µ–Ω–∏–µ ‚Äî FSM –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    update4 = {"user_id": user_id, "text": "–ü—Ä–∏–≤–µ—Ç!"}
    r4 = await dispatcher.dispatch(update4)
    assert "–°–ø–∞—Å–∏–±–æ, –ê–ª–∏—Å–∞" in r4
    assert "alice@example.com" in r4
    assert "–ü—Ä–∏–≤–µ—Ç!" in r4

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–±—Ä–æ—à–µ–Ω–æ
    assert not fsm.has_state(user_id)
